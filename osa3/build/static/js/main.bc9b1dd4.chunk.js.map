{"version":3,"sources":["services/persons.js","components/App.js","index.js"],"names":["baseUrl","services_persons","axios","get","newObject","post","id","put","concat","delete","DelButton","_ref","deleteHandler","react_default","a","createElement","onClick","Person","props","name","number","App_DelButton","Persons","_ref2","persons","map","pers","App_Person","key","InputField","_ref3","handler","state","value","onChange","Form","_ref4","submitHandler","fieldHandler","onSubmit","App_InputField","type","Notification","_ref5","message","className","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addPerson","event","preventDefault","tulos","newName","p","includes","newPerson","newNumber","handleAdd","handleChange","field","setState","defineProperty","target","newFilter","error","info","_this2","personService","then","response","data","_this3","console","log","existingId","findIndex","window","confirm","setTimeout","catch","filter","_this4","App_Notification","App_Form","App_Persons","handleDelete","bind","React","Component","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.bc9b1dd4.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = 'http://localhost:3001/api/persons'\r\n\r\nconst getAll = () => {\r\n  return axios.get(baseUrl)\r\n}\r\n\r\nconst create = (newObject) => {\r\n  return axios.post(baseUrl, newObject)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  return axios.put(`${baseUrl}/${id}`, newObject)\r\n}\r\n\r\nconst remove = (id) => {\r\n    return axios.delete(`${baseUrl}/${id}`)\r\n  }\r\n\r\nexport default { getAll, create, update, remove }","import React from 'react';\nimport personService from '../services/persons';\nimport './puhelinluettelo.css';\n\nconst DelButton = ({deleteHandler, id}) => {\n    return (\n        <button onClick={deleteHandler(id)}>\n            Poista\n        </button>\n    )\n}\n\nconst Person = (props) => {\n    return (\n        <p>{props.name} : {props.number} <DelButton id={props.id} deleteHandler={props.deleteHandler}/></p>\n    )\n}\n\nconst Persons = ({ persons, deleteHandler }) => {\n    return (\n        <div>\n            {persons.map(pers => <Person name={pers.name} number={pers.number} key={pers.name} id={pers.id} deleteHandler={deleteHandler}/>)}\n        </div>\n    )\n}\n\nconst InputField = ({ handler, state, name }) => {\n    return (\n        <div>\n            {name}: <input value={state} onChange={handler} />\n        </div>\n    )\n}\n\nconst Form = ({ submitHandler, fieldHandler, state }) => {\n    return (\n        <form onSubmit={submitHandler}>\n            <div>\n                <h2>Lisää uusi</h2>\n                <InputField name='nimi' state={state['newName']} handler={fieldHandler('newName')} />\n            </div>\n            <div>\n                <InputField name='numero' state={state['newNumber']} handler={fieldHandler('newNumber')} />\n            </div>\n            <div>\n                <button type=\"submit\">lisää</button>\n            </div>\n        </form>\n\n    )\n}\n\nconst Notification = ({ message, type }) => {\n    if (message === null) {\n      return null\n    }\n    return (\n      <div className={type}>\n        {message}\n      </div>\n    )\n  }\n\nfunction Exists(persons, name) {\n    return (\n        persons.map(p => p.name).includes(name)\n    )\n}\n\nfunction Filter(persons, name) {\n    return (\n        persons.filter(p => p.name.includes(name))\n    )\n}\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            persons: [],\n            newName: '',\n            newNumber: '',\n            newFilter: '',\n            error: null,\n            info: null\n        }\n    }\n\n    componentDidMount() {\n        // console.log('did mount')\n        personService.getAll()\n          .then(response => {\n            // console.log('promise fulfilled')\n            this.setState({ persons: response.data })\n          })\n      }\n\n    handleAdd(tulos, newPerson){\n        console.log('add alkaa', tulos, newPerson)\n        if (!tulos) {\n            personService.create(newPerson)\n            .then(response => {\n            //   console.log(response)\n              this.setState({\n                persons: this.state.persons.concat(response.data),\n                info: `Henkilön ${this.state.newName} tiedot lisättiin palvelimelle`,\n                newName: '',\n                newNumber: ''\n            })\n            setTimeout(() => {\n                this.setState({info: null})\n              }, 5000)\n            })        \n        } else {\n            const existingId = this.state.persons[this.state.persons.findIndex(p => p.name === this.state.newName)].id;\n            if (window.confirm(`Henkilö ${this.state.newName} on jo luettelossa. Tallennetaanko uusi numero?`)) { \n                personService.update(existingId, newPerson)\n                .then(response => {\n                    // console.log('addPerson change', response);\n                    this.setState({\n                        info: `Henkilön ${this.state.newName} tiedot päivitettiin palvelimelle`,\n                        persons: this.state.persons.map(p => p.id !== response.data.id ? p : response.data),\n                        newName: '',\n                        newNumber: ''\n                    })\n                    setTimeout(() => {\n                        this.setState({info: null})\n                      }, 5000)\n                })\n                .catch(error => {\n                    // console.log('poistettu henkilö!!!');\n                    this.setState({\n                        error: `Henkilö ${this.state.newName} on poistettu palvelimelta, lisätään se nyt uudelleen`,\n                        persons: this.state.persons.filter(p => p.id !== existingId),\n                        newName: '',\n                        newNumber: ''\n                    })\n                    setTimeout(() => {\n                        this.setState({error: null})\n                      }, 5000)\n                    this.handleAdd(false, newPerson)\n                })         \n            } else {\n                // console.log('else haara');\n                this.setState({\n                    info: `Henkilön ${this.state.newName} tietoja ei päivitetty`,\n                    newName: '',\n                    newNumber: ''\n                })\n                setTimeout(() => {\n                    this.setState({info: null})\n                  }, 5000)\n            }\n        }\n    }\n\n    addPerson = (event) => {\n  \n        event.preventDefault();\n        const tulos = Exists(this.state.persons, this.state.newName);\n        const newPerson = { name: this.state.newName, number: this.state.newNumber };\n\n        this.handleAdd(tulos, newPerson)\n    }\n\n    handleDelete(id){\n        return (\n            () => {\n            const name = this.state.persons[this.state.persons.findIndex(p => p.id === id)].name\n            if (window.confirm(`Haluatko poistaa ${name} luettelosta?`)) { \n                personService.remove(id)\n                .then(response => {\n                    // console.log('handleDelete', response)\n                    this.setState({\n                        info: `Henkilö ${name} poistettiin palvelimelta`,\n                        persons: this.state.persons.filter(p => p.id !== id)\n                    })\n                    setTimeout(() => {\n                        this.setState({info: null})\n                      }, 5000)\n                })\n                .catch(error => {\n                    console.log('on jo poistettu henkilö!!!');\n                    this.setState({\n                        error: `Henkilö ${name} on jo poistettu palvelimelta`,\n                        persons: this.state.persons.filter(p => p.id !== id)\n                    })\n                    setTimeout(() => {\n                        this.setState({error: null})\n                      }, 5000)\n                })         \n            }\n        })\n    }\n\n    handleChange = (field) => {\n        return (event) => this.setState({ [field]: event.target.value })\n    }\n\n    render() {\n        return (\n            <div>\n\n                <h2>Puhelinluettelo</h2>\n                <div>\n                    <Notification message={this.state.error} type=\"error\"/>\n                    <Notification message={this.state.info} type=\"info\"/>\n                </div>\n                <div>\n                    <InputField name='rajaa valintoja' state={this.state['newFilter']} handler={this.handleChange('newFilter')} />\n                </div>\n                    <Form fieldHandler={this.handleChange} submitHandler={this.addPerson} state={this.state} />\n                <h2>Numerot</h2>\n                    <Persons persons={Filter(this.state.persons, this.state.newFilter)} deleteHandler={this.handleDelete.bind(this)} />\n            </div>\n        )\n    }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom'\nimport App from './components/App'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n"],"sourceRoot":""}